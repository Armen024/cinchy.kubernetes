apiVersion: apps/v1
kind: Deployment
metadata:
  name: connections-app
  labels:
    access: public
    name: connections-app
spec:
  selector:
    matchLabels:
      name: connections-app
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        name: connections-app
      annotations:
        sidecar.istio.io/rewriteAppHTTPProbers: "false"
        proxy.istio.io/config: '{ "holdApplicationUntilProxyStarts": true }'
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - connections-app
            topologyKey: "kubernetes.io/hostname"
      serviceAccountName: connections-serviceaccount
      volumes:
      - name: connections-volume-appsettings
        secret:
          secretName: connections-secret-appsettings
      - name: connections-volume-config
        secret:
          secretName: connections-secret-config
          items:
          - key: config.json
            path: config.json
      - name: connections-temp
        persistentVolumeClaim:
          claimName: connections-temp
          readOnly: false
      imagePullSecrets:
      - name: ecr-docker-login
      containers:
      - name: connections
        image: <image>
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          privileged: false
        env:
          - name: OPENSEARCH_PASSWORD
            valueFrom:
              secretKeyRef:
                name: opensearch-credentials
                key: password
          - name: OPENSEARCH_USERNAME
            value: admin 
          - name: CinchyEnvironment
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: CINCHY_ENCRYPTION_KEY
            valueFrom:
              secretKeyRef:
                name: cinchy-environment-settings
                key: encryptionkey
          - name: CinchyClientSettings__Url
            valueFrom:
              secretKeyRef:
                name: cinchy-environment-settings
                key: url
          - name: CINCHY_CONNECTIONS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: cinchy-environment-settings
                key: connectionspassword
        volumeMounts:
        - name: connections-volume-appsettings
          readOnly: true
          mountPath: "/usr/share/appsettings"
        - name: connections-volume-config
          readOnly: true
          mountPath: "/app/ClientApp/dist/assets/config/config.json"
          subPath: config.json
        - name: connections-temp
          mountPath: /app/tmp
        ports:
        - name: connect-port
          containerPort: 8000
        resources:
          requests:
            cpu: "100m"
            memory: "256Mi"
          limits:
            cpu: "2"
            memory: "4G"
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /healthcheck
            port: 8000
          initialDelaySeconds: 30
          failureThreshold: 5
          periodSeconds: 30
          timeoutSeconds: 5
        startupProbe:
          httpGet:
            path: /healthcheck
            port: 8000
          failureThreshold: 200
          periodSeconds: 10
          #timeoutSeconds: 90
        readinessProbe:
          httpGet:
            path: /healthcheck
            port: 8000
          initialDelaySeconds: 30
          failureThreshold: 5
          periodSeconds: 30
          timeoutSeconds: 300
        # lifecycle:
        #   postStart:
        #     exec:
        #       command:
        #       - "bash"
        #       - "-c"
        #       - |
        #         KB_URL=http://opensearch-dashboard-opensearch-dashboards.logging.svc.cluster.local:5601/dashboard
        #         echo $KB_URL
        #         while [[ "$(curl -s -o /dev/null -w '%{http_code}\n' -L $KB_URL)" != "200" ]]; do sleep 1; done
        #         CONNECTIONS=$(curl -u ${OPENSEARCH_USERNAME}:${OPENSEARCH_PASSWORD} -X GET $KB_URL/api/saved_objects/_find?type=index-pattern | sed -e 's/[{}]/''/g' | awk -v RS=',"' -F: '/^id/ {print $2}' | tr -d '"' | grep $CinchyEnvironment-connections-app)
        #         if [ $CONNECTIONS = $CinchyEnvironment-connections-app ]; then echo "Cool"; else curl -u ${OPENSEARCH_USERNAME}:${OPENSEARCH_PASSWORD} -XPOST "$KB_URL/api/index_patterns/index_pattern" -H 'kbn-xsrf: true' -H 'Content-Type: application/json' -d'{"override": false,"refresh_fields": true,"index_pattern": {"title": "'"$CinchyEnvironment-connections-app"'", "timeFieldName":"@t"}}'; fi
